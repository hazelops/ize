version: 2
project_name: ize
builds:
  - env: [CGO_ENABLED=0]
    goos:
      - linux
      - windows
      - darwin
    goarch:
      - amd64
      - arm64
    ignore:
      - goos: windows
        goarch: arm64
    id: "ize"
    dir: .
    main: ./cmd
    ldflags:
      - -s -w -X 'github.com/hazelops/ize/internal/version.Version={{.Env.RELEASE_VERSION}}' -X 'github.com/hazelops/ize/internal/version.GitCommit={{.Env.SHORT_SHA}}'
    tags:
      - viper_toml1

brews:
   -
    name: ize
    repository:
      owner: hazelops
      name: homebrew-ize
      branch: main
      # Optionally a token can be provided, if it differs from the token provided to GoReleaser
      token: "{{ .Env.HOMEBREW_TAP_GITHUB_TOKEN }}"
    download_strategy: CurlDownloadStrategy
    commit_author:
      name: ize
      email: ize@hazelops.com
    # The project name and current git tag are used in the format string.
    commit_msg_template: "Brew formula update for {{ .ProjectName }} version {{ .Tag }}"
    homepage: "https://ize.sh/"
    description: "IZE is an opinionated infrastructure wrapper that allows to use multiple tools in one infra"
    license: "MIT"
    skip_upload: auto
    conflicts:
      - ize-dev
    test: |
      system "#{bin}/ize"
    # Custom install script for brew.
    install: |
      bin.install "ize"
nfpms:
  # note that this is an array of nfpm configs
  -
    # ID of the nfpm config, must be unique.
    # Defaults to "default".
    id: ize

    # Name of the package.
    # Defaults to `ProjectName`.
#    package_name: ize

    # You can change the file name of the package.
    # Default: `{{ .PackageName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}{{ if .Arm }}v{{ .Arm }}{{ end }}{{ if .Mips }}_{{ .Mips }}{{ end }}`
    file_name_template: "{{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}"
    formats:
      - deb
      - rpm
    vendor: HazelOps
    homepage: https://ize.sh
    maintainer: Ize development team <ize@hazelops.com>
    description: IZE is an opinionated infrastructure wrapper that allows to use multiple tools in one infra
    license: Apache 2.0

publishers:
  - name: fury.io
    # by specifying `packages` id here goreleaser will only use this publisher
    # with artifacts identified by this id
    ids:
      - ize
    dir: "{{ dir .ArtifactPath }}"
    cmd: curl -F package=@{{ .ArtifactName }} https://{{ .Env.FURY_TOKEN }}@push.fury.io/hazelops/

archives:
  -
     format_overrides:
       - goos: windows
         format: zip

# Repository to push the app manifest to.
scoops:
  -
    repository:
     owner: hazelops
     name: scoop-ize

    # Optionally a branch can be provided.
    # Defaults to the default repository branch.
     branch: main

    # Optionally a token can be provided, if it differs from the token provided to GoReleaser
     token: "{{ .Env.HOMEBREW_TAP_GITHUB_TOKEN }}"

  # Folder inside the repository to put the scoop.
  # Default is the root folder.
#  folder: latest

  # Git author used to commit to the repository.
  # Defaults are shown.
    commit_author:
     name: hazelops
     email: ize@hazelops.com

  # The project name and current git tag are used in the format string.
    commit_msg_template: "Ize update for {{ .ProjectName }} version {{ .Tag }}"

  # Your app's homepage.
  # Default is empty.
    homepage: "https://ize.sh/"

  # Your app's description.
  # Default is empty.
    description: "IZE is an opinionated infrastructure wrapper that allows to use multiple tools in one infra"

  # Your app's license
  # Default is empty.
    license: Apache License 2.0

  # Setting this will prevent goreleaser to actually try to commit the updated
  # manifest leaving the responsibility of publishing it to the user.
  # If set to auto, the release will not be uploaded to the scoop bucket
  # in case there is an indicator for prerelease in the tag e.g. v1.0.0-rc1
  # Default is false.
    skip_upload: false

  # Persist data between application updates
#  persist:
#    - "data"
#    - "config.toml"

  # An array of commands to be executed before an application is installed.
  # Default is empty.
#  pre_install: ["Write-Host 'Running preinstall command'"]

  # An array of commands to be executed after an application is installed.
  # Default is empty.
#  post_install: ["Write-Host 'Running postinstall command'"]

  # GOAMD64 to specify which amd64 version to use if there are multiple versions
  # from the build section.
  # Default is v1.
 # goamd64: v3
